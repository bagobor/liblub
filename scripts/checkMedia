#!/usr/bin/python
#coding: UTF-8

import sys, os, operator

colors = {
'gray':               '\033[1;30m',
'red':                '\033[1;31m',
'green':              '\033[1;32m',
'yellow':             '\033[1;33m',
'blue':               '\033[1;34m',
'magenta':            '\033[1;35m',
'cyan':               '\033[1;36m',
'white':              '\033[1;37m',
'crimson':            '\033[1;38m',

'underscore':         '\033[0;04m',
'inverse':            '\033[0;07m',
'concealed':          '\033[0;08m', 

'clear':              '\033[0m',
}
def grepCount(search_string):
    grepstring = "grep %s * -IR" % search_string
    return len(os.popen(grepstring).readlines())

def sort(item_dict):
  sorted_dict = sorted(item_dict.items(), key=operator.itemgetter(1))
  return sorted_dict
  
class AssetPack:
    def __init__(self):
        self.search_result = {}
        self.unused = []
        self.used = {}
        
    def printTitle(self):
        print(colors["blue"]+ "ᴨ ", self.type + colors["clear"])
        
    def printStats(self):
      print(len(self.unused), "/", len(self.search_result), "%s unused." % self.type)

    def printUsed(self):
      print(colors["green"], "ᴪ Used", colors["clear"])
      sorted_used = sort(self.used)
      for value, item in reversed(sorted_used):
          print ("  ", item, value)

    def printUnused(self):
        print(colors["yellow"], "ᴫ Unused", colors["clear"])
        sorted_unused = sorted(self.unused)
        for item in sorted_unused:
          print ("  ", item)

    def getSorted(self):
      sorted = sort(self.search_result)
      for item, value in sorted:
        if value == 0:
            self.unused.append(item)
        else:
            self.used[item] = value

class TexturePack(AssetPack):
  
  def __init__(self):
      AssetPack.__init__(self)
      self.type = "textures"
      self.printTitle()
      self.search()
      self.getSorted()
      self.printUsed()
      self.printUnused()
      self.printStats()
      
  def search(self):
      searchstring = "find media/textures/ | grep '\.' | sed 's/media\/textures\/// '"

      """
for dirname, dirnames, filenames in os.walk('media/meshes'):
    for subdirname in dirnames:
        print os.path.join(dirname, subdirname)
    for filename in filenames:
        print os.path.join(dirname, filename)
      """

      self.cube_maps = {}
      for texture in os.popen(searchstring).readlines():
        texture_name = texture.strip()
        if texture_name.find("cubemaps"):
          self.search_result[texture_name] = grepCount(texture_name)
        else:
          self.cube_maps[texture_name.split("_")[0]] = 1
    
      for cube_map in self.cube_maps:
        self.search_result[cube_map] = grepCount(cube_map)


class MeshPack(AssetPack):
  
  def __init__(self):
      AssetPack.__init__(self)
      self.type = "meshes"
      self.printTitle()
      self.search()
      self.getSorted()
      self.printUsed()
      self.printUnused()
      self.printStats()
      
  def search(self):
      for dirname, dirnames, filenames in os.walk('media/meshes'):
          for filename in filenames:
              self.search_result[filename] = grepCount(filename)
      
  def printStuff(self):
      for mesh in unused_meshes:
        print (mesh)


TexturePack()
MeshPack()
