#!/usr/bin/python
#coding: UTF-8
import os, subprocess, sys
from optparse import OptionParser

blacklist_demos = ["tesselation", "mandelbulb", "raycasting"]
blacklist_scenes = ["ash", "common", "csm", "multilight", "nice", "terrain", "ocean"]
blacklist_tests = []



# get media path
media_prefixes = ["/usr/share/liblub/", "/usr/local/share/liblub/", ""]
media_prefix = ""
for prefix in media_prefixes:
	if os.path.exists(prefix + "media"):
		media_prefix = prefix

class ExampleRunner:

  def __init__(self):
    self.pausing = False
    self.valgrind = False
    self.getBinaryPath()

  def waitForInput(self):
    if self.pausing:
      print("[Press Enter to Continue]")
      sys.stdin.read(1)
      
  def getFiles(self, path):
    files = os.listdir(path)
    files.sort()
    return files
    
  # get binary path
  def getBinaryPath(self):
    path_prefixes = ["/usr/", "/usr/local/", ""]
    path_prefix = ""
    for prefix in path_prefixes:
      if os.path.exists(prefix + "bin/liblub-load"):
        self.path_prefix = prefix
    self.loaderpath = self.path_prefix + "bin/liblub-load"
    
  def getDemos(self):
    demos = os.popen(self.loaderpath + " -l").readlines()[0].strip().split(" ")
    print (demos)
    return demos
    
  def run(self, command):
    print("Running", command)
    
    if self.valgrind:
      command = ["sh", "scripts/valgrindStats.sh", command]
    print(command)
    subprocess.call(command)
    self.waitForInput()

  def runDemos(self):
    for demo in self.getDemos():
      if demo not in blacklist_demos:
        self.run([self.loaderpath, demo])
        
  def runScenes(self):    
    for scene in self.getFiles(media_prefix + "media/scenes"):
      if not "~" in scene:
        sceneShort = scene.replace(".xml", "")
        if sceneShort not in blacklist_scenes:
          self.run([self.loaderpath, scene])

  def runTests(self):
    try:
        for test in self.getFiles("test"):
            if test not in blacklist_tests:
                self.run('test/%s' % test)
    except OSError:
        print ("Tests are not build yet. Try 'cmake . -DBUILD_TESTS=On'")
            
  def start(self):
    parser = OptionParser()
    #parser.add_option("-a", "--all", dest="filename",
    #                  help="Run all", metavar="FILE")
    parser.add_option("-a", "--all", action="store_true", dest="all", help="Run all")
    parser.add_option("-d", "--demos", action="store_true", dest="demos", help="Run demos")
    parser.add_option("-s", "--scenes", action="store_true", dest="scenes", help="Run scene files")
    parser.add_option("-t", "--tests", action="store_true", dest="tests", help="Run tests")
    parser.add_option("-p", "--pause", action="store_true", dest="pause", help="Pause after every test")
    parser.add_option("-v", "--valgrind", action="store_true", dest="valgrind", help="Run in valgrind")
    parser.add_option("-e", "--editor", action="store_true", dest="editor", help="Run in editor")

    (options, args) = parser.parse_args()

    if options.editor is not None:
      self.loaderpath = self.path_prefix + "bin/liblub-editor"

    if options.valgrind is not None:
      self.valgrind = True
      self.pausing = True

    if options.pause is not None:
      self.pausing = True

    if options.all is not None:
      options.demos = True
      options.scenes = True
      options.tests = True
    if options.demos is not None:
      self.runDemos()
    if options.scenes is not None:
      self.runScenes()
    if options.tests is not None:
      self.runTests()
 
    hasNeededOption = False
    mandatories = ['all', 'demos', 'scenes', 'tests']
    for m in mandatories:
      if options.__dict__[m]:
        hasNeededOption = True
        
    if not hasNeededOption:
      print("A mandatory option is missing.")
      parser.print_help()
      exit(-1)

foo = ExampleRunner()
foo.start()
