#version 410

layout(vertices = 3) out;
uniform float pixels_per_division;
uniform vec2 screen_size;
uniform mat4 MVMatrix;
uniform mat4 MVPMatrix;
//uniform bool projected;
const bool projected = false;

vec2 project(vec4 vertex){
	vec4 result = MVPMatrix * vertex;
	result = clamp(result/result.w, -1.3, 1.3);
	return (result.xy+1)*(screen_size*0.5);
}

float divisions(vec2 v0, vec2 v1){
	return round(clamp(distance(v0, v1)/pixels_per_division, 1, 64));
}

void main(){
	if(gl_InvocationID == 0){
		float e0, e1, e2, e3;
		if(projected){
			vec2 v0 = project(gl_in[0].gl_Position);
			vec2 v1 = project(gl_in[1].gl_Position);
			vec2 v2 = project(gl_in[2].gl_Position);
			vec2 v3 = project(gl_in[3].gl_Position);

			e0 = divisions(v1, v2);
			e1 = divisions(v0, v1);
			e2 = divisions(v3, v0);
			e3 = divisions(v2, v3);
		}else{
			vec3 v0 = (MVMatrix * gl_in[0].gl_Position).xyz;
			vec3 v1 = (MVMatrix * gl_in[1].gl_Position).xyz;
			vec3 v2 = (MVMatrix * gl_in[2].gl_Position).xyz;
			vec3 v3 = (MVMatrix * gl_in[3].gl_Position).xyz;
			   
			float x = 50; 
			e0 = round(clamp(x/length((v1+v2)/2), 1, 64));
			e1 = round(clamp(x/length((v0+v1)/2), 1, 64));
			e2 = round(clamp(x/length((v3+v0)/2), 1, 64));
			e3 = round(clamp(x/length((v2+v3)/2), 1, 64));
		}

		gl_TessLevelInner[0] = max(e1, e2);
		gl_TessLevelInner[1] = max(e0, e3);
		gl_TessLevelOuter[0] = e0;
		gl_TessLevelOuter[1] = e1;
		gl_TessLevelOuter[2] = e2;
		gl_TessLevelOuter[3] = e3;
	}
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}
